generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ------------------- Branch -------------------
model Branch {
  id        Int          @id @default(autoincrement())
  name      String
  code      String       @unique
  address   String?
  status    BranchStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  members Member[]
  staff   Staff[]
  classes Class[]
}

enum BranchStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

// ------------------- Member -------------------
model Member {
  id               Int             @id @default(autoincrement())
  memberCode       String          @unique
  firstName        String
  middleName       String?
  lastName         String
  gender           Gender
  dob              DateTime?
  email            String?         @unique
  phone            String
  address          String?
  city             String?
  state            String?
  status           MemberStatus    @default(ACTIVE)
  membershipStatus MembershipState @default(ACTIVATED)
  weight           Float?
  height           Float?
  chest            Float?
  waist            Float?
  arms             Float?
  fatPercent       Float?
  username         String?         @unique
  password         String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  branchId Int?
  branch   Branch? @relation(fields: [branchId], references: [id])

  memberships Membership[]
  attendances Attendance[]
  payments    Payment[]
  invoices    Invoice[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  SUSPENDED
  CONTINUE
}

enum MembershipState {
  ACTIVATED
  DEACTIVATED
  PENDING
}

// ------------------- Membership -------------------
model MembershipPlan {
  id           Int        @id @default(autoincrement())
  name         String
  description  String?
  durationDays Int
  price        Float
  features     Json?
  status       PlanStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  memberships Membership[]
}

model Membership {
  id        Int              @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  status    MembershipStatus @default(ACTIVE)

  memberId Int
  member   Member @relation(fields: [memberId], references: [id])

  planId Int
  plan   MembershipPlan @relation(fields: [planId], references: [id])
}

enum PlanStatus {
  ACTIVE
  INACTIVE
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

// ------------------- Staff -------------------
model Staff {
  id             Int         @id @default(autoincrement())
  staffCode      String      @unique
  firstName      String
  lastName       String
  gender         Gender
  dob            DateTime
  email          String      @unique
  phone          String      @unique
  profilePhoto   String?
  role           String
  status         StaffStatus @default(ACTIVE)
  joinDate       DateTime
  exitDate       DateTime?
  salaryType     SalaryType
  fixedSalary    Float?
  hourlyRate     Float?
  commissionRate Float?
  loginAccess    Boolean     @default(false)
  username       String?     @unique
  password       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  branchId Int?
  branch   Branch? @relation(fields: [branchId], references: [id])

  attendances      StaffAttendance[]
  shiftAllocations ShiftAllocation[]
  salaries         SalaryRecord[]
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  RESIGNED
  TERMINATED
}

enum SalaryType {
  FIXED
  HOURLY
  COMMISSION
}

// ------------------- Invoice & Payment -------------------
model Invoice {
  id          Int           @id @default(autoincrement())
  invoiceCode String        @unique
  amount      Float
  status      InvoiceStatus @default(PENDING)
  issuedDate  DateTime
  dueDate     DateTime?
  paidDate    DateTime?
  notes       String?

  memberId Int
  member   Member @relation(fields: [memberId], references: [id])

  payments Payment[] // One-to-many: multiple payments per invoice
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
  OVERDUE
}

model Payment {
  id          Int           @id @default(autoincrement())
  paymentCode String        @unique
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(COMPLETED)
  paidDate    DateTime
  notes       String?

  memberId Int
  member   Member @relation(fields: [memberId], references: [id])

  invoiceId Int?
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  BANK_TRANSFER
}

enum PaymentStatus {
  COMPLETED
  FAILED
  REFUNDED
  PENDING
}

// ------------------- Classes -------------------
model Class {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  capacity    Int
  schedule    Json?
  status      ClassStatus @default(ACTIVE)

  branchId Int
  branch   Branch @relation(fields: [branchId], references: [id])

  sessions Session[]
}

enum ClassStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

// ------------------- Role, Permission & User -------------------
model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  users       User[]
  permissions Permission[]
}

model Permission {
  id       Int    @id @default(autoincrement())
  action   String
  resource String
  roleId   Int
  role     Role   @relation(fields: [roleId], references: [id])
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  roleId   Int
  role     Role   @relation(fields: [roleId], references: [id])
}

// ------------------- Missing models added -------------------
model Attendance {
  id        Int       @id @default(autoincrement())
  memberId  Int
  member    Member    @relation(fields: [memberId], references: [id])
  checkIn   DateTime
  checkOut  DateTime?
  createdAt DateTime  @default(now())
}

model StaffAttendance {
  id        Int       @id @default(autoincrement())
  staffId   Int
  staff     Staff     @relation(fields: [staffId], references: [id])
  checkIn   DateTime
  checkOut  DateTime?
  createdAt DateTime  @default(now())
}

model ShiftAllocation {
  id        Int      @id @default(autoincrement())
  staffId   Int
  staff     Staff    @relation(fields: [staffId], references: [id])
  shiftDate DateTime
  shiftType String
  createdAt DateTime @default(now())
}

model SalaryRecord {
  id        Int      @id @default(autoincrement())
  staffId   Int
  staff     Staff    @relation(fields: [staffId], references: [id])
  amount    Float
  month     DateTime
  status    String
  createdAt DateTime @default(now())
}

model Session {
  id          Int      @id @default(autoincrement())
  classId     Int
  class       Class    @relation(fields: [classId], references: [id])
  sessionDate DateTime
  startTime   DateTime
  endTime     DateTime
  instructor  String?
  createdAt   DateTime @default(now())
}
