generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// *
/// * ========= Core Masters =========
model Branch {
  id           Int       @id @default(autoincrement())
  name         String
  code         String?   @unique
  address      String?
  manager      String?
  phone        String?
  email        String?
  username     String?   @unique
  password     String?
  hours        String?   @db.LongText
  branch_image String?
  status       String?   @default("Inactive")
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  classes      Class[]
  invoices     Invoice[]
  members      Member[]
  staff        Staff[]

  @@map("branch")
}

model Role {
  id               Int              @id @default(autoincrement())
  role_name        String           @unique
  role_description String?
  status           RoleStatus       @default(ACTIVE)
  permissions_json String?          @map("permissions_json") @db.LongText
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  role_permissions RolePermission[]
  staff            Staff[]

  @@map("role")
}

model Permission {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  role_permissions RolePermission[]

  @@map("permission")
}

model RolePermission {
  role_id       Int
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id])
  role          Role       @relation(fields: [role_id], references: [id])

  @@id([role_id, permission_id])
  @@index([permission_id])
  @@map("rolepermission")
}

/// *
/// * ========= People =========
model Staff {
  id                      Int                      @id @default(autoincrement())
  staff_id                String                   @unique
  first_name              String                   @default("TempFirst")
  last_name               String                   @default("TempLast")
  name                    String?
  gender                  StaffGender              @default(MALE)
  dob                     DateTime
  email                   String                   @unique
  phone                   String                   @unique
  profile_photo           String?
  role                    String?
  status                  StaffStatus              @default(ACTIVE)
  join_date               DateTime                 @default(now())
  exit_date               DateTime?
  salary_type             StaffSalaryType          @default(FIXED)
  fixed_salary            Decimal?                 @db.Decimal(10, 2)
  hourly_rate             Decimal?                 @db.Decimal(10, 2)
  commission_rate_percent Decimal?                 @db.Decimal(5, 2)
  login_enabled           Boolean                  @default(false)
  username                String?                  @unique
  password                String?
  branch_id               Int?
  role_id                 Int?
  created_at              DateTime                 @default(now())
  updated_at              DateTime                 @default(now())
  classes                 Class[]
  duty_rosters            DutyRoster[]
  housekeepingattendance  housekeepingattendance[]
  notifications           Notification[]
  salary_records          SalaryRecord[]
  sessions_led            Session[]                @relation("TrainerSessions")
  shift_allocations       ShiftAllocation[]
  branch                  Branch?                  @relation(fields: [branch_id], references: [id])
  staffRole               Role?                    @relation(fields: [role_id], references: [id])
  attendances             StaffAttendance[]
  tasks                   Task[]

  @@index([branch_id])
  @@index([role_id])
  @@map("staff")
}

model Member {
  id                Int                    @id @default(autoincrement())
  member_code       String                 @unique
  first_name        String
  middle_name       String?
  last_name         String
  gender            MemberGender
  date_of_birth     DateTime?
  email             String?                @unique
  phone             String                 @unique
  address           String?
  city              String?
  state             String?
  status            MemberStatus           @default(ACTIVE)
  membership_status MemberMembershipStatus @default(ACTIVATED)
  weight            Decimal?               @db.Decimal(5, 2)
  height            Decimal?               @db.Decimal(5, 2)
  chest             Decimal?               @db.Decimal(5, 2)
  waist             Decimal?               @db.Decimal(5, 2)
  arms              Decimal?               @db.Decimal(5, 2)
  thigh             Decimal?               @db.Decimal(5, 2)
  fat_percent       Decimal?               @db.Decimal(5, 2)
  username          String?                @unique
  password          String?
  member_image      String?
  plan              String?
  branch_id         Int?
  group_id          Int?
  created_at        DateTime               @default(now())
  updated_at        DateTime               @updatedAt
  attendances       MemberAttendance[]
  bookings          Booking[]
  invoices          Invoice[]
  branch            Branch?                @relation(fields: [branch_id], references: [id])
  group             Group?                 @relation(fields: [group_id], references: [id])
  memberships       Membership[]
  payments          Payment[]

  @@index([branch_id])
  @@index([group_id])
  @@map("member")
}

model Group {
  id           Int      @id @default(autoincrement())
  name         String
  photo        String?
  total_member Int?     @map("total_member")
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  members      Member[]

  @@map("groups")
}

/// *
/// * ========= Attendance =========
model MemberAttendance {
  id        Int              @id @default(autoincrement())
  member_id Int
  check_in  DateTime?
  check_out DateTime?
  date      DateTime
  status    AttendanceStatus @default(PRESENT)
  member    Member           @relation(fields: [member_id], references: [id])

  @@index([member_id])
  @@map("attendance")
}

model StaffAttendance {
  id        Int                  @id @default(autoincrement())
  staff_id  Int
  check_in  DateTime?
  check_out DateTime?
  date      DateTime
  mode      StaffAttendanceMode  @default(QR)
  notes     String?
  shift     StaffAttendanceShift @default(NOSHIFT)
  status    AttendanceStatus     @default(PRESENT)
  staff     Staff                @relation(fields: [staff_id], references: [id])

  @@index([staff_id])
  @@map("staffattendance")
}

/// *
/// * ========= Classes & Sessions =========
model Class {
  id           Int         @id @default(autoincrement())
  class_id     String      @unique
  class_name   String
  status       ClassStatus @default(ACTIVE)
  branch_id    Int?
  trainer_id   Int?
  schedule_day String?     @db.LongText
  date         DateTime
  time         DateTime
  total_sheets Int
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  branch       Branch?     @relation(fields: [branch_id], references: [id])
  trainer      Staff?      @relation(fields: [trainer_id], references: [id])
  sessions     Session[]

  @@index([branch_id])
  @@index([trainer_id])
  @@map("class")
}

model Session {
  id              Int           @id @default(autoincrement())
  class_id        Int
  trainer_id      Int
  date            DateTime
  time            String?       @db.VarChar(50)
  duration        Int
  location        String?
  notes           String?
  status          SessionStatus @default(SCHEDULED)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  rescheduledDate DateTime?
  rescheduledTime String?
  isRescheduled   Boolean       @default(false)
  class           Class         @relation(fields: [class_id], references: [id])
  trainer         Staff         @relation("TrainerSessions", fields: [trainer_id], references: [id])

  @@index([class_id])
  @@index([trainer_id])
  @@map("session")
}

/// *
/// * ========= Plans, Memberships & Bookings =========
model MembershipPlan {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String?
  duration_days      Int
  price              Decimal              @db.Decimal(10, 2)
  features           String?              @db.LongText
  status             MembershipPlanStatus @default(ACTIVE)
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  memberships        Membership[]
  walkinregistration walkinregistration[]

  @@map("membershipplan")
}

model Membership {
  id         Int              @id @default(autoincrement())
  start_date DateTime
  end_date   DateTime
  status     MembershipStatus @default(ACTIVE)
  member_id  Int
  plan_id    Int
  member     Member           @relation(fields: [member_id], references: [id])
  plan       MembershipPlan   @relation(fields: [plan_id], references: [id])

  @@index([member_id])
  @@index([plan_id])
  @@map("membership")
}

model Plan {
  id         Int       @id @default(autoincrement())
  name       String
  sessions   Int       @default(0)
  validity   Int       @default(0)
  price      Decimal   @db.Decimal(10, 2)
  type       PlanType
  is_active  Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  bookings   Booking[]

  @@map("plan")
}

model Booking {
  id         Int             @id @default(autoincrement())
  member_id  Int
  plan_id    Int
  status     booking_status? @default(PENDING)
  created_at DateTime        @default(now())
  updated_at DateTime        @default(now()) @updatedAt
  member     Member          @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "fk_booking_member")
  plan       Plan            @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "fk_booking_plan")

  @@index([member_id], map: "fk_booking_member")
  @@index([plan_id], map: "fk_booking_plan")
  @@map("booking")
}

/// *
/// * ========= Invoicing & Payments =========
model Invoice {
  id             Int           @id @default(autoincrement())
  branch_id      Int?
  member_id      Int
  invoice_number String        @unique
  status         InvoiceStatus @default(UNPAID)
  email          String
  customer_name  String
  phone          String
  invoice_date   DateTime
  due_date       DateTime?
  notes          String?
  discount       Decimal?      @db.Decimal(10, 2)
  subtotal       Decimal       @db.Decimal(12, 2)
  tax_amount     Decimal       @db.Decimal(12, 2)
  total_amount   Decimal       @db.Decimal(12, 2)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @default(now())
  branch         Branch?       @relation(fields: [branch_id], references: [id])
  member         Member        @relation(fields: [member_id], references: [id])
  invoiceitem    invoiceitem[]
  payments       Payment[]

  @@index([branch_id])
  @@index([member_id])
  @@map("invoice")
}

model Payment {
  id                  Int           @id @default(autoincrement())
  amount              Decimal       @db.Decimal(10, 2)
  method              PaymentMethod
  status              PaymentStatus @default(PENDING)
  member_id           Int
  invoice_id          Int?
  invoice_no          String?
  receipt_url         String?
  payment_description String?
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  invoice             Invoice?      @relation(fields: [invoice_id], references: [id])
  member              Member        @relation(fields: [member_id], references: [id])

  @@index([member_id])
  @@index([invoice_id])
  @@map("payment")
}

/// *
/// * ========= Workforce Ops =========
model Notification {
  id         Int                @id @default(autoincrement())
  staff_id   Int
  title      String
  status     NotificationStatus @default(NEW)
  created_at DateTime           @default(now())
  staff      Staff              @relation(fields: [staff_id], references: [id])

  @@index([staff_id])
  @@map("notification")
}

model Task {
  id           Int        @id @default(autoincrement())
  staff_id     Int
  task_date    DateTime
  category     String
  task_title   String
  description  String
  status       TaskStatus @default(PENDING)
  completed_at DateTime?
  staff        Staff      @relation(fields: [staff_id], references: [id])

  @@index([staff_id])
  @@map("task")
}

model DutyRoster {
  shift_id    Int       @id @default(autoincrement())
  staff_id    Int
  date        DateTime
  shift_type  String    @default("Straight Shift")
  start_time  DateTime?
  end_time    DateTime?
  breaks      String?   @db.LongText
  status      String    @default("Scheduled")
  approved_by Int?
  approved_at DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  staff       Staff     @relation(fields: [staff_id], references: [id])

  @@index([staff_id])
  @@map("dutyroster")
}

model ShiftAllocation {
  id          Int                        @id @default(autoincrement())
  staff_id    Int
  shift_type  shiftallocation_shift_type
  date        DateTime
  start_time  DateTime
  end_time    DateTime
  break_start DateTime?
  break_end   DateTime?
  created_at  DateTime                   @default(now())
  updated_at  DateTime                   @updatedAt
  staff       Staff                      @relation(fields: [staff_id], references: [id])

  @@index([staff_id])
  @@map("shiftallocation")
}

model SalaryRecord {
  id                   Int       @id @default(autoincrement())
  salary_id            String    @unique                     // e.g. "SAL001", "SAL002"
  staff_id             Int
  role                 String?
  compensation_type    StaffSalaryType?                     // FIXED, HOURLY, COMMISSION (optional)
  hours_worked         Decimal?  @db.Decimal(7, 2)            // e.g., 160
  hourly_rate          Decimal?  @db.Decimal(10, 2)           // from staff profile
  hourly_total         Decimal?  @db.Decimal(10, 2)
  fixed_salary         Decimal?  @db.Decimal(10, 2)
  commission_total     Decimal?  @db.Decimal(10, 2)
  bonuses              Json?                                 // [{label:"Performance Bonus", amount:1000}, ...]
  deductions           Json?                                 // [{label:"Tax", amount:200}, ...]
  net_pay              Decimal?  @db.Decimal(10, 2)
  status               salaryRecord_status @default(GENERATED)
  period_start         DateTime
  period_end           DateTime
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt

  // Relation
  staff Staff @relation(fields: [staff_id], references: [id])

  @@index([staff_id])
  @@map("salaryrecord")
}


/// *
/// * ========= Misc =========
model Campaign {
  id         Int      @id @default(autoincrement())
  title      String
  message    String
  type       String
  target     String?
  status     String   @default("scheduled")
  created_at DateTime @default(now())

  @@map("campaign")
}

model Maintenance {
  id          Int                 @id @default(autoincrement())
  issue_title String
  reported_on DateTime
  status      MaintenanceStatus   @default(PENDING)
  priority    MaintenancePriority @default(MEDIUM)
  assigned_to Int?

  @@map("maintenance")
}

model housekeepingattendance {
  id        Int                           @id @default(autoincrement())
  staff_id  Int
  date      DateTime
  check_in  DateTime?
  check_out DateTime?
  status    housekeepingattendance_status @default(PRESENT)
  notes     String?
  staff     Staff                         @relation(fields: [staff_id], references: [id], map: "housekeepingAttendance_staff_id_fkey")

  @@index([staff_id], map: "housekeepingAttendance_staff_id_idx")
}

model invoiceitem {
  id          Int     @id @default(autoincrement())
  invoice_id  Int
  description String
  quantity    Int
  price       Decimal @db.Decimal(10, 2)
  tax_percent Decimal @db.Decimal(5, 2)
  line_total  Decimal @db.Decimal(10, 2)
  invoice     Invoice @relation(fields: [invoice_id], references: [id], map: "invoiceItem_invoice_id_fkey")

  @@index([invoice_id], map: "invoiceItem_invoice_id_idx")
}

model walkinregistration {
  id                 Int             @id @default(autoincrement())
  full_name          String
  phone_number       String
  email              String?
  membership_plan_id Int?
  interested         String?
  time               DateTime
  notes              String?
  membershipplan     MembershipPlan? @relation(fields: [membership_plan_id], references: [id], map: "walkInRegistration_membership_plan_id_fkey")

  @@index([membership_plan_id], map: "walkInRegistration_membership_plan_id_fkey")
}

/// *
/// * ========= Enums =========
enum RoleStatus {
  ACTIVE
  INACTIVE
}

enum StaffGender {
  MALE
  FEMALE
  OTHER
}
enum salaryRecord_status {
  GENERATED
  APPROVED
  PAID
  CANCELLED
}
enum StaffStatus {
  ACTIVE
  INACTIVE
  RESIGNED
  TERMINATED
  ON_LEAVE
}

enum StaffSalaryType {
  FIXED
  HOURLY
  COMMISSION
  OTHER
}

enum StaffAttendanceMode {
  QR
  MANUAL
  SYSTEM
}

enum StaffAttendanceShift {
  MORNING
  EVENING
  NIGHT
  NOSHIFT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  ONLEAVE
  HOLIDAY
  HALF_DAY
}

enum MemberGender {
  MALE
  FEMALE
  OTHER
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  SUSPENDED
  CONTINUED
}

enum MemberMembershipStatus {
  ACTIVATED
  DEACTIVATED
  PENDING
  EXPIRED
  SUSPENDED
}

enum PlanType {
  GROUP
  PERSONAL
  ONLINE
  OTHER
}

enum InvoiceStatus {
  DRAFT
  UNPAID
  PAID
  PARTIALLY_PAID
  VOID
  OVERDUE
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  NETBANKING
  RAZORPAY
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  PARTIAL
  FAILED
  REFUNDED
  CANCELLED
}

enum ClassStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum MaintenanceStatus {
  PENDING
  INPROGRESS
  RESOLVED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
}

enum NotificationStatus {
  NEW
  READ
}

enum TaskStatus {
  PENDING
  INPROGRESS
  COMPLETED
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

enum MembershipPlanStatus {
  ACTIVE
  INACTIVE
}

enum housekeepingattendance_status {
  PRESENT
  ABSENT
  LATE
  ONLEAVE
  HOLIDAY
  HALF_DAY
}

enum booking_status {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum shiftallocation_shift_type {
  STRAIGHT
  BREAK
  ROTATING
  FLEXIBLE
}
